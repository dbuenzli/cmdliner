{0 [Cmdliner] cookbook}

A few recipes and starting {{!blueprints}blueprints} to describe your
command lines with {!Cmdliner}.

{1:tips Tips and pitfalls}

Command line interfaces are a rather crude and inexpressive user
interaction medium. It is tempting to try to be nice to users in
various ways but this often backfires in confusing context sensitive
behaviours. Here are a few tips and Cmdliner features you {b should
rather not use}.

{2:avoid_defaultsubs Avoid default commands in groups}

Command {{!Cmdliner.Cmd.group}groups} can have a default command, that
is be of the form [tool [CMD]]. Except perhaps at the top level of
your tool, it's better to avoid them. They increase command line
parsing ambiguities.

In particular if the default command has positional arguments, users
are forced to use the {{!cli.posargs}disambiguation token [--]} to
specify them so that they can be distinguished from command
names. For example:

{@sh[
tool -- file â€¦
]}

{2:avoid_defaultoptionvalues Avoid default option values}

Optional arguments {{!Cmdliner.Arg.opt}with values} can have a default
value, that is be of the form [--opt[=VALUE]]. In general it is generally better
to avoid them as they lead to context sensitive command lines
specification and surprises when users refine invocations. For examples
suppose you have the synopsis

{@sh[
tool --opt[=VALUE] [FILE]
]}

Trying to refine the following invocation to add a [FILE] parameter is painful:

{@sh[
tool --opt
]}

There's more than one way but the easiest is to specify it as [tool
--opt -- FILE] but that's something you could have avoided by not
having a default option value.

{2:avoid_requiredoption Avoid required optional arguments}

Cmdliner allows to define required optional arguments. Avoid doing
this, it's a contradiction in the terms. In command line interfaces
optional arguments are made to be omitted by users. Use required
positional arguments if arguments are required by your cli.

{2:migrating Migrating from other conventions}

If you are porting your command line parsing to [Cmdliner] and that
you have conventions that clash with [Cmdliner]'s ones but you need to
preserve backward compatibility, one way of proceeding is to
pre-process {!Sys.argv} into the right shape before giving to command
{{!Cmdliner.Cmd.section-eval}evaluation functions} via the [?argv]
optional argument.

These are two common cases:

{ul
{- Long option names with a single dash like [-warn-error]. In this
   case simply prefix an additional [-] to these arguments when they
   occur in {!Sys.argv} before the [--] argument (after which all arguments are
   positional and to be treated literally).}
{- Long option names with a single letter like [--X]. In this
   case simply chop the first [-] to make it a short option when they
   occur in {!Sys.argv} before the [--] argument (after which all arguments are
   positional and to be treated literally).}}

{1:conventions Conventions}

By the simple fact of using Cmdliner you are already abiding to a
great deal of command line interface conventions. Here are a few other
ones that are not necessarily enforced by the library but that are
good to adopt.

{2:use_dash Use ["-"] to specify [stdin]}

{1:args Arguments}

{2:absent How do I provide default values for absent arguments ?}

{2:positional How do I define a positional argument ?}

{2:argument How do I document the behaviour of absent arguments ?}

TODO first need to clarify why you may want an option.

There are three ways to document the behaviour when an argument is
unspecified on the command line.

{ul
{- If you use a particular OCaml value and can construct it at the
   point of definition use the [none] argument of {!Cmdliner.Arg.some'}}
{- If you use a prticular OCaml value but cannot construct it at
   the poiht of definition use the [none] string optional argument
   of {!Cmdliner.Arg.some'}. This string will be rendered in bold.}
{- If you want to describe a more, but short, complex behaviour use
   the {!absent} parameter of [info].}}

{1:exit_codes Exit codes}

{2:exit_codes How to I document exit codes ?}

{1:blueprints Blueprints}

These blueprints when copied to a [src.ml] file can be compiled and run with:

{@sh[
ocamlfind ocamlopt -package cmdliner -linkgpkg src.ml
./a.out --help
]}

More concrete examples can be found on the {{!page-examples}examples page}
and the {{!page-tutorial}tutorial} may help too.

{2:blueprint_min Minimal}

A minimal example.

{@ocaml name=blueprint_min.ml[
let tool () = Cmdliner.Cmd.Exit.ok

open Cmdliner
open Cmdliner.Term.Syntax

let tool =
  let doc = "The tool synopsis is TODO" in
  Cmd.make (Cmd.info "TODO-toolname" ~doc) @@
  let+ unit = Term.const () in
  tool unit

let main () = Cmd.eval' tool
let () = if !Sys.interactive then () else exit (main ())
]}

{2:blueprint_tool A simple tool}

This is a tool that has a flag, an optional positional argument
specifying and input file. It also responds to the [--version] option.

{@ocaml name=blueprint_tool.ml[
let tool ~flag ~infile = Cmdliner.Cmd.Exit.ok

open Cmdliner
open Cmdliner.Term.Syntax

let flag = Arg.(value & flag & info ["flag"] ~doc:"The flag")
let infile =
  let doc = "$(docv) is the input file. Use $(b,-) for $(b,stdin)." in
  Arg.(value & pos 0 file "-" & info [] ~doc ~docv:"FILE")

let tool =
  let doc = "The tool synopsis is TODO" in
  Cmd.make (Cmd.info "TODO-toolname" ~version:"%%VERSION%%" ~doc) @@
  let+ flag and+ infile in
  tool ~flag ~infile

let main () = Cmd.eval' tool
let () = if !Sys.interactive then () else exit (main ())
]}


{2:blueprint_tool A tool with subcommands}

This is a tool with two subcommands [hey] and [ho].

{@ocaml name=blueprint_cmds.ml[
let hey () = Cmdliner.Cmd.Exit.ok
let ho () = Cmdliner.Cmd.Exit.ok

open Cmdliner
open Cmdliner.Term.Syntax

let flag = Arg.(value & flag & info ["flag"] ~doc:"The flag")
let infile =
  let doc = "$(docv) is the input file. Use $(b,-) for $(b,stdin)." in
  Arg.(value & pos 0 file "-" & info [] ~doc ~docv:"FILE")

let hey_cmd =
  let doc = "The hey command synopsis is TODO" in
  Cmd.make (Cmd.info "hey" ~doc) @@
  let+ unit = Term.const () in
  ho ()

let ho_cmd =
  let doc = "The ho command synopsis is TODO" in
  Cmd.make (Cmd.info "ho" ~doc) @@
  let+ unit = Term.const () in
  ho unit

let tool =
  let doc = "The tool synopsis is TODO" in
  Cmd.group (Cmd.info "TODO-toolname" ~version:"%%VERSION%%" ~doc) @@
  [hey_cmd; ho_cmd]

let main () = Cmd.eval' tool
let () = if !Sys.interactive then () else exit (main ())
]}
