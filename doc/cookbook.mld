{0 [Cmdliner] cookbook}

A few recipes and starting {{!blueprints}blueprints} to describe your
command lines with {!Cmdliner}.

{b Note.} Some of the code snippets here assume they are done after a:
{[
open Cmdliner
open Cmdliner.Term.Syntax
]}

{1:tips Tips and pitfalls}

Command line interfaces are a rather crude and inexpressive user
interaction medium. It is tempting to try to be nice to users in
various ways but this often backfires in confusing context sensitive
behaviours. Here are a few tips and Cmdliner features you {b should
rather not use}.

{2:avoid_defaultsubs Avoid default commands in groups}

Command {{!Cmdliner.Cmd.group}groups} can have a default command, that
is be of the form [tool [CMD]]. Except perhaps at the top level of
your tool, it's better to avoid them. They increase command line
parsing ambiguities.

In particular if the default command has positional arguments, users
are forced to use the {{!cli.posargs}disambiguation token [--]} to
specify them so that they can be distinguished from command
names. For example:

{@sh[
tool -- file …
]}

{2:avoid_defaultoptionvalues Avoid default option values}

Optional arguments {{!Cmdliner.Arg.opt}with values} can have a default
value, that is be of the form [--opt[=VALUE]]. In general it is generally better
to avoid them as they lead to context sensitive command lines
specification and surprises when users refine invocations. For examples
suppose you have the synopsis

{@sh[
tool --opt[=VALUE] [FILE]
]}

Trying to refine the following invocation to add a [FILE] parameter is painful:

{@sh[
tool --opt
]}

There's more than one way but the easiest is to specify it as [tool
--opt -- FILE] but that's something you could have avoided by not
having a default option value.

{2:avoid_requiredoption Avoid required optional arguments}

Cmdliner allows to define required optional arguments. Avoid doing
this, it's a contradiction in the terms. In command line interfaces
optional arguments are defined to be… optional, not doing so is
surprising. Use required positional arguments if arguments are
required by your cli.

{2:migrating Migrating from other conventions}

If you are porting your command line parsing to [Cmdliner] and that
you have conventions that clash with [Cmdliner]'s ones but you need to
preserve backward compatibility, one way of proceeding is to
pre-process {!Sys.argv} into a new array of the right shape before
giving it to command {{!Cmdliner.Cmd.section-eval}evaluation
functions} via the [?argv] optional argument.

These are two common cases:

{ul
{- Long option names with a single dash like [-warn-error]. In this
   case simply prefix an additional [-] to these arguments when they
   occur in {!Sys.argv} before the [--] argument (after which all arguments are
   positional and to be treated literally).}
{- Long option names with a single letter like [--X]. In this
   case simply chop the first [-] to make it a short option when they
   occur in {!Sys.argv} before the [--] argument (after which all arguments are
   positional and to be treated literally).}}

{2:program_structure Source program structure}

In general Cmdliner wants you to see tools as regular OCaml functions
that you make available to the shell. This mans adopting the following
source structure:

{[
(* Implementation, except for exit codes does not deal with
   command line interface related matters and is independent from
   Cmdliner. *)

let exit_ok = 0
let tool … = …; exit_ok

(* Command line interface *)

open Cmdliner
open Cmdliner.Term.Syntax

let tool_cmd = … (* Has a term that invokes [tool] *)
let main () = Cmd.eval' tool_cmd
let () = if !Sys.interactive then () else exit (main ())
]}

In particular it's good for your readers' understanding that your
program has a single point where it {!Stdlib.exit}s. This is also
useful for playing with your program in the OCaml toplevel (REPL).

{1:conventions Conventions}

By the simply using Cmdliner you are already abiding to a great deal
of command line interface conventions. Here are a few other ones that
are not necessarily enforced by the library but that are good to
adopt for your users.

{2:use_dash Use ["-"] to specify [stdin]}

{1:args Arguments}

{2:absent How do I provide default values for absent arguments ?}

{2:positional How do I define a positional argument ?}

{2:argument How do I document the behaviour of absent arguments ?}

TODO first need to clarify why you may want an option.

There are three ways to document the behaviour when an argument is
unspecified on the command line.

{ul
{- If you use a particular OCaml value and can construct it at the
   point of definition use the [none] argument of {!Cmdliner.Arg.some'}}
{- If you use a prticular OCaml value but cannot construct it at
   the poiht of definition use the [none] string optional argument
   of {!Cmdliner.Arg.some'}. This string will be rendered in bold.}
{- If you want to describe a more, but short, complex behaviour use
   the {!absent} parameter of [info].}}

{1:commands Commands}

{2:exit_code_docs How do I document command exit codes ?}

Exit codes are documentd by {!Cmdliner.Cmd.Exit.type-info} values. You
need to specify them and provide them to the {!Cmdliner.Cmd.type-info}
value of the command you are defining via the [exits] optional
arguments. For example:

{[
let conf_not_found = 1

let exits =
  Cmd.Exit.info conf_not_found "if no configuration could be found." ::
  Cmd.Exit.defaults

let cmd =
  Cmd.make (Cmd.info "mycmd" ~exits) @@
  …
]}

{2:which_cmd_eval Which [Cmd] evaluation function should I use ?}

There are (too) many {{!Cmdliner.Cmd.section-eval}command evaluation}
functions. They have grown organically in a rather ad-hoc manner. Some
of these are there for backwards compatibility reasons and advanced
usage for complex tools.

Here are the main ones to use and why you may want to use them which
essentially depends on how you want to handle errors and exit codes.

{ul
{- {!Cmdliner.Cmd.val-eval}. This forces your function to return [()].
   The evaluation function always returns an exit code of [0] unless a
   command line parsing error occurs.}
{- {!Cmdliner.Cmd.eval'}. {b Recommended}. This forces your function to return
   an exit code [exit] which is returned by the evaluation function unless a
   command line parsing error occurs. This is the recommended function to use
   as it forces you to think about how to report errors and design
   useful exit codes for users.}
{- {!Cmdliner.Cmd.eval_result} is akin to {!Cmdliner.Cmd.val-eval} except
   it forces your function to return either [Ok ()] or [Error msg].
   The evaluation function returns with exit code [0] unless [Error msg] is
   computed in which case [msg] is printed on the error stream prefixed by the
   executable name and the evaluation function returns with
   exit code {!Cmdliner.Cmd.Exit.some_error}.}
{- {!Cmdliner.Cmd.eval_result'} is akin to {!Cmdliner.Cmd.eval_result}, except
   the [Ok] case carries an exit code which is returned by the evaluation
   function.}}


{1:blueprints Blueprints}

These blueprints when copied to a [src.ml] file can be compiled and run with:

{@sh[
ocamlfind ocamlopt -package cmdliner -linkgpkg src.ml
./a.out --help
]}

More concrete examples can be found on the {{!page-examples}examples page}
and the {{!page-tutorial}tutorial} may help too.

These examples follow a conventional {!program_structure}.

{2:blueprint_min Minimal}

A minimal example.

{@ocaml name=blueprint_min.ml[
let tool () = Cmdliner.Cmd.Exit.ok

open Cmdliner
open Cmdliner.Term.Syntax

let tool =
  let doc = "The tool synopsis is TODO" in
  Cmd.make (Cmd.info "TODO-toolname" ~doc) @@
  let+ unit = Term.const () in
  tool unit

let main () = Cmd.eval' tool
let () = if !Sys.interactive then () else exit (main ())
]}

{2:blueprint_tool A simple tool}

This is a tool that has a flag, an optional positional argument
specifying and input file. It also responds to the [--version] option.

{@ocaml name=blueprint_tool.ml[
let exit_todo = 1

let tool ~flag ~infile = exit_todo

open Cmdliner
open Cmdliner.Term.Syntax

let flag = Arg.(value & flag & info ["flag"] ~doc:"The flag")
let infile =
  let doc = "$(docv) is the input file. Use $(b,-) for $(b,stdin)." in
  Arg.(value & pos 0 file "-" & info [] ~doc ~docv:"FILE")

let tool_cmd =
  let doc = "The tool synopsis is TODO" in
  let man = [
    `S Manpage.s_description;
    `P "$(iname) does TODO" ]
  in
  let exits =
    Cmd.Exit.info exit_todo ~doc:"When there is stuff todo" ::
    Cmd.Exit.defaults
  in
  Cmd.make (Cmd.info "TODO" ~version:"%%VERSION%%" ~doc ~man ~exits) @@
  let+ flag and+ infile in
  tool ~flag ~infile

let main () = Cmd.eval' tool_cmd
let () = if !Sys.interactive then () else exit (main ())
]}

{2:blueprint_cmds A tool with subcommands}

This is a tool with two subcommands [hey] and [ho].

{@ocaml name=blueprint_cmds.ml[
let hey () = Cmdliner.Cmd.Exit.ok
let ho () = Cmdliner.Cmd.Exit.ok

open Cmdliner
open Cmdliner.Term.Syntax

let flag = Arg.(value & flag & info ["flag"] ~doc:"The flag")
let infile =
  let doc = "$(docv) is the input file. Use $(b,-) for $(b,stdin)." in
  Arg.(value & pos 0 file "-" & info [] ~doc ~docv:"FILE")

let hey_cmd =
  let doc = "The hey command synopsis is TODO" in
  Cmd.make (Cmd.info "hey" ~doc) @@
  let+ unit = Term.const () in
  ho ()

let ho_cmd =
  let doc = "The ho command synopsis is TODO" in
  Cmd.make (Cmd.info "ho" ~doc) @@
  let+ unit = Term.const () in
  ho unit

let tool =
  let doc = "The tool synopsis is TODO" in
  Cmd.group (Cmd.info "TODO-toolname" ~version:"%%VERSION%%" ~doc) @@
  [hey_cmd; ho_cmd]

let main () = Cmd.eval' tool
let () = if !Sys.interactive then () else exit (main ())
]}
